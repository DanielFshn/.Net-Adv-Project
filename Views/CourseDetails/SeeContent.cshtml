@model Course_Store.Models.CourseDetail

<style>
    body{
        background: #727272;
    }
</style>

<body>
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>
   
    @Ajax.ActionLink("Finish", "AddPoints", "CourseDetails", new { id = Model.Id }, new AjaxOptions()
{
   HttpMethod = "GET",
   InsertionMode = InsertionMode.Replace,
   UpdateTargetId = "progressDiv"
})
    @*@Ajax.ActionLink("MyProgress", "ProgressBar", new AjaxOptions()
                                                 {
                                                 HttpMethod = "GET",
                                                 UpdateTargetId = "progressDiv2",
                                                 InsertionMode = InsertionMode.Replace
                                                })*@
    @*<script>
        videos.push()
    </script>*@
    <script>
            // 2. This code loads the IFrame Player API code asynchronously.
            var tag = document.createElement('script');

            @*tag.src ="@Model.VideoPath";*@
            tag.src ="@Model.VideoPath";
            var firstScriptTag = document.getElementsByTagName('script')[0];
            debugger
            console.log(firstScriptTag);
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

            // 3. This function creates an <iframe> (and YouTube player)
            //    after the API code downloads.
            var player;
            function onYouTubeIframeAPIReady() {
                player = new YT.Player('player', {
                    height: '390',
                    width: '640',
                    videoId: 'M7lc1UVf-VE',
                    playerVars: {
                'playsinline': 1
                    },
                    events: {
                            'onReady': onPlayerReady,
                        'onStateChange': onPlayerStateChange,
                        'onPlayerStateChange': onPlayerStateChange
                    }
                    });
                }

                // 4. The API will call this function when the video player is ready.
            function onPlayerReady(event) {
                event.target.playVideo();

            }

            // 5. The API calls this function when the player's state changes.
            //    The function indicates that when playing a video (state=1),
            //    the player should play for six seconds and then stop.
            var done = false;
            function onPlayerStateChange(event) {
                if (event.data == YT.PlayerState.PLAYING && !done) {
                    setTimeout(stopVideo, 6000);
                    done = true;
                }
            }

            function onPlayerStateChange(event) {
                if (event.data != YT.PlayerState.PLAYING && event.data !== 0) {
                    console.log("Video hasn't ended: Current time" + event.target.getCurrentTime())
                }

                if (event.data === 0) {
                    console.log("Video has ended")
                }
            }

            function stopVideo() {
                player.stopVideo();
        }

    </script>

    <div id="progressDiv">
    </div>
    <div id="progressDiv2">
    </div>
</body>
